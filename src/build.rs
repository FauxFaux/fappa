use std::fs;
use std::io::Write;

use failure::Error;
use fs_extra::dir;
use tempfile;

use crate::specs::Command;
use crate::specs::Package;
use crate::Release;

enum Kind {
    Modified,
    Added,
    Deleted,
}

impl From<u64> for Kind {
    fn from(val: u64) -> Self {
        match val {
            0 => Kind::Modified,
            1 => Kind::Added,
            2 => Kind::Deleted,
            other => panic!("invalid change kind: {}", other),
        }
    }
}

pub fn build(docker: (), release: &Release, package: &Package) -> Result<(), Error> {
    let dir = tempfile::TempDir::new()?;
    {
        let mut dockerfile = dir.path().to_path_buf();
        dockerfile.push("Dockerfile");
        let mut dockerfile = fs::File::create(dockerfile)?;

        writeln!(dockerfile, "FROM fappa-{}", release.codename())?;
        writeln!(dockerfile, "WORKDIR /build")?;

        if !package.build_dep.is_empty() {
            writeln!(
                dockerfile,
                "RUN DEBIAN_FRONTEND=noninteractive apt-get install -y {}",
                sorted_spaced(&package.build_dep),
            )?;
        }

        for command in &package.source {
            match command {
                Command::Clone { repo, dest } => {
                    let crate::git::LocalRepo { specifier, path } = crate::git::check_cloned(repo)?;

                    dir::copy(format!(".cache/{}", path), &dir, &dir::CopyOptions::new())?;
                    writeln!(dockerfile, "COPY {} /repo/{}", path, path)?;
                    writeln!(
                        dockerfile,
                        "RUN git clone --no-checkout /repo/{} {} && (cd {} && git {})",
                        path,
                        dest,
                        dest,
                        specifier.git_args()
                    )?
                }
                _ => unimplemented!("source: {:?}", command),
            }
        }

        for command in &package.build {
            match command {
                Command::WorkDir(dir) => writeln!(dockerfile, "WORKDIR {}", dir)?,
                Command::Autoreconf => writeln!(
                    dockerfile,
                    "RUN autoreconf -fvi && ./configure --prefix=/usr/local && make -j 2"
                )?,
                Command::CMake => writeln!(
                    dockerfile,
                    "RUN mkdir cmake-build-package && cd cmake-build-package && cmake .. && make -j 2"
                )?,
                _ => unimplemented!("build: {:?}", command),
            }
        }

        for command in &package.install {
            match command {
                Command::Run(what) => writeln!(dockerfile, "CMD {}", what)?,
                _ => unimplemented!("install: {:?}", command),
            }
        }
    }

    let id: String = unimplemented!(r"crate::dump_lines(
        *release,
        &docker.images().build(
            &BuildOptions::builder(crate::tempdir_as_bad_str(&dir)?)
                .build(),
        )?,
    )?");

    println!("starting install container {}", id);
    let created = unimplemented!("containers.get(&id).start().wait()");
    println!("done!");

    let mut new: Vec<String> = Vec::new();
    let mut rm: Vec<String> = Vec::new();

    // TODO: Hmm, no. Modified and Added are not the same. We need to ensure that only
    // TODO: directories are modified, and that they're in ignorable attributes?

    // should really be a list of everything that's in the tagged image?
    let existing_files = ["/usr", "/usr/local", "/build"];

    rm.retain(|path| !matches(path, &package.exclude_files));

    ensure!(
        rm.is_empty(),
        "some files were removed, and they are not excluded: {:?}",
        rm
    );

    new.retain(|path| {
        !existing_files.contains(&path.as_str()) && !matches(path, &package.exclude_files)
    });
    {
        let violations: Vec<&String> = new
            .iter()
            .filter(|path| !matches(path, &package.include_files))
            .collect();
        ensure!(
            violations.is_empty(),
            "some files were generated by not included: {:?}",
            violations
        );
    }

    for line in new {
        println!("{}", line);
    }

    Ok(())
}

fn matches(path: &str, patterns: &[String]) -> bool {
    for pattern in patterns {
        if pattern.ends_with("/**") {
            let pattern = pattern.trim_end_matches('*');
            assert!(
                !pattern.contains(|c: char| c == '*' || '?' == c),
                "unsupported pattern extra wildcards: {}",
                pattern
            );
            if path.starts_with(pattern) {
                return true;
            }
        } else {
            unimplemented!("unsupported pattern type: {}", pattern)
        }
    }

    false
}

fn sorted_spaced<S: AsRef<str>, T: IntoIterator<Item = S>>(list: T) -> String {
    let mut vec: Vec<String> = list.into_iter().map(|x| x.as_ref().to_string()).collect();
    vec.sort();
    vec.join(" ")
}
